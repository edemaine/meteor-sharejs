// Generated by CoffeeScript 2.1.0
(function() {
  //# Based on
  //# https://github.com/HansPinckaers/shareJS/blob/master/src/client/cm.coffee

  // This is some utility code to connect a CodeMirror editor
  // to a sharejs document.
  // It is heavily inspired from the Ace editor hook.

  // Convert a CodeMirror delta into an op understood by share.js
  var applyToShareJS;

  applyToShareJS = function(editorDoc, delta, doc) {
    var delLen, i, j, len, ref, rm, startPos;
    // CodeMirror deltas give a text replacement.
    // I tuned this operation a little bit, for speed.
    startPos = 0; // Get character position from # of chars in each line.
    i = 0; // i goes through all lines.
    while (i < delta.from.line) {
      startPos += editorDoc.lineInfo(i).text.length + 1; // Add 1 for '\n'
      i++;
    }
    startPos += delta.from.ch;
    if (delta.to.line === delta.from.line && delta.to.ch === delta.from.ch) { // Then nothing was removed.
      doc.insert(startPos, delta.text.join('\n'));
    } else {
      //delLen = delta.to.ch - delta.from.ch
      //while i < delta.to.line
      //  delLen += editorDoc.lineInfo(i).text.length + 1   # Add 1 for '\n'
      //  i++
      delLen = 0;
      ref = delta.removed;
      for (j = 0, len = ref.length; j < len; j++) {
        rm = ref[j];
        delLen += rm.length;
      }
      delLen += delta.removed.length - 1; // count newlines
      doc.del(startPos, delLen);
      if (delta.text) {
        doc.insert(startPos, delta.text.join('\n'));
      }
    }
    if (delta.next) {
      return applyToShareJS(editorDoc, delta.next, doc);
    }
  };

  // Attach a CodeMirror editor to the document. The editor's contents are replaced
  // with the document's contents unless keepEditorContents is true. (In which case
  // the document's contents are nuked and replaced with the editor's).
  window.sharejs.extendDoc('attach_cm', function(editor, keepEditorContents) {
    var check, editorListener, sharedoc, suppress, undoDepth;
    if (!this.provides.text) {
      throw new Error('Only text documents can be attached to CodeMirror');
    }
    // When we apply ops from sharejs, CodeMirror emits edit events.
    // We need to ignore those to prevent an infinite typing loop.
    suppress = false;
    sharedoc = this;
    check = function() {
      return window.setTimeout(function() {
        var editorText, otText;
        editorText = editor.getValue();
        otText = sharedoc.getText();
        if (editorText !== otText) {
          console.error("Text does not match!");
          console.error(`editor: ${editorText}`);
          console.error(`ot:     ${otText}`);
          // Replace the editor text with the doc snapshot.
          suppress = true;
          editor.setValue(sharedoc.getText());
          return suppress = false;
        }
      }, 0);
    };
    if (keepEditorContents) {
      this.del(0, sharedoc.getText().length);
      this.insert(0, editor.getValue());
    } else {
      // Prevent immediate undo from going before initially loaded text.
      undoDepth = editor.getOption('undoDepth');
      editor.setOption('undoDepth', 0);
      editor.setValue(sharedoc.getText());
      editor.setOption('undoDepth', undoDepth);
    }
    check();
    // Listen for edits in CodeMirror.
    editorListener = function(ed, change) {
      if (suppress) {
        return;
      }
      applyToShareJS(editor, change, sharedoc);
      return check();
    };
    editor.on('change', editorListener);
    this.on('insert', function(pos, text) {
      suppress = true;
      // All the primitives we need are already in CM's API.
      editor.replaceRange(text, editor.posFromIndex(pos));
      suppress = false;
      return check();
    });
    this.on('delete', function(pos, text) {
      var from, to;
      suppress = true;
      from = editor.posFromIndex(pos);
      to = editor.posFromIndex(pos + text.length);
      editor.replaceRange('', from, to);
      suppress = false;
      return check();
    });
    this.detach_cm = function() {
      // TODO: can we remove the insert and delete event callbacks?
      editor.off('change', editorListener);
      return delete this.detach_cm;
    };
  });

}).call(this);
